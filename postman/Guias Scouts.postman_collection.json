{
	"info": {
		"_postman_id": "dbef1199-169e-4ab8-b492-5824713f6dc3",
		"name": "Guias Scouts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25882160"
	},
	"item": [
		{
			"name": "authentication",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract token from the response body\r",
									"var responseBody = pm.response.json();\r",
									"var token = responseBody.body.token;\r",
									"\r",
									"// Set the token as an environment variable\r",
									"pm.environment.set(\"jwt_token\", token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"root@scouts.com\",\r\n    \"password\" : \"root\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Non Root",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract token from the response body\r",
									"var responseBody = pm.response.json();\r",
									"var token = responseBody.body.token;\r",
									"\r",
									"// Set the token as an environment variable\r",
									"pm.environment.set(\"jwt_token\", token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"natsukawaii5@gmail.com\",\r\n    \"password\" : \"jNnk@EF3Me9A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm User",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"natsukawaii5@gmail.com\",\r\n    \"code\" : \"SUK942\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/confirm_user",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"confirm_user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Health",
			"item": [
				{
					"name": "DB Health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/health/db",
							"host": [
								"{{host}}"
							],
							"path": [
								"health",
								"db"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Change Password",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"prevPassword\" : \"root2\",\r\n    \"newPassword\" : \"root\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/user/change-password",
							"host": [
								"{{host}}"
							],
							"path": [
								"user",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register User",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fullname\": \"Juan Vargas\",\n    \"email\": \"natsukawaii5@gmail.com\",\n    \"password\": \"1234\",\n    \"birthday\": 983923200,\n    \"id_patrol\": 1,\n    \"id_role\" : 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/user/register-user",
							"host": [
								"{{host}}"
							],
							"path": [
								"user",
								"register-user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reestablecer Contraseña",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/user/reestablish-password?email=natsukawaii5@gmail.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"user",
								"reestablish-password"
							],
							"query": [
								{
									"key": "email",
									"value": "natsukawaii5@gmail.com"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Materials",
			"item": [
				{
					"name": "Search",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://ec2-3-236-202-175.compute-1.amazonaws.com:5000/material/search?q=",
							"protocol": "http",
							"host": [
								"ec2-3-236-202-175",
								"compute-1",
								"amazonaws",
								"com"
							],
							"port": "5000",
							"path": [
								"material",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Material",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Brújula TEST 1\",\r\n    \"file\": \"data:application/octet-stream;base64,\",\r\n    \"extension\": \"pdf\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/material/add-material",
							"host": [
								"{{host}}"
							],
							"path": [
								"material",
								"add-material"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/material/delete?id=3",
							"host": [
								"{{host}}"
							],
							"path": [
								"material",
								"delete"
							],
							"query": [
								{
									"key": "id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Download Material",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:9000/workspace-guias-scouts/YO_NO_EXISTO.pdf",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"workspace-guias-scouts",
								"YO_NO_EXISTO.pdf"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Progresos",
			"item": [
				{
					"name": "Get All Progress Types",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/progress/all_progress_types",
							"host": [
								"{{host}}"
							],
							"path": [
								"progress",
								"all_progress_types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Progress Types Copy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/progress/questions?progressType=Brújula Bronce&userId=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"progress",
								"questions"
							],
							"query": [
								{
									"key": "progressType",
									"value": "Brújula Bronce"
								},
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}